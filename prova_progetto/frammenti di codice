// Se non c'Ã¨ la routing table allora non inviamo il pacchetto, ma cominciamo a costruirla con il broadcast
/*

	if(route_mess->dst_add != route_mess->crt_node){
		for (n=0; tab_complete[n].dst_add != mess->dst_add && n<(sizeof(tab_complete)/5); n++){
			//dbg("radio_pack","n = %d\n", n);	
		}

		if (tab_complete[n].dst_add == mess->dst_add){
			dbg("radio_pack","Find a match with destination \n");
			dbg("radio_pack","Send to next-hop \n");
		

			if (tab_complete[n].next_hop == mess->dst_add){
				dbg("radio_pack","Packet sent to destination");		
			}else{
				dbg("radio_pack","Packet sent to next hop");

				if(call AMSend.send(tab_complete[n].next_hop,&packet,sizeof(my_msg_t)) == SUCCESS){	
					 	  dbg("radio_pack",">>>Pack\n \t Payload length %hhu \n", call Packet.payloadLength(&packet));
						  dbg_clear("radio_pack","\t Source: %hhu \n ", call AMPacket.source( &packet ) );
						  dbg_clear("radio_pack","\t Destination: %hhu \n ", call AMPacket.destination( &packet ) );

						  dbg_clear("radio_pack","\t AM Type: %hhu \n ", call AMPacket.type( &packet ) );
						  dbg_clear("radio_pack","\t\t Payload \n" );
						  dbg_clear("radio_pack", "\t\t msg_type: %hhu \n ", mess->msg_type);
						  dbg_clear("radio_pack", "\t\t msg_id: %hhu \n", mess->msg_id);

						  dbg_clear("radio_pack", "\t\t DATA: %hhu \n", mess->value);
						  dbg_clear("radio_pack", "\t\t destination address: %hhu \n", mess->dst_add);
						  dbg_clear("radio_pack", "\t\t source address: %hhu \n", mess->src_add);
						  dbg_clear("radio_send", "\n");

						  dbg_clear("radio_pack", "\n");	
				}
			}
		}else{
			dbg("radio_pack","Do not find a match,then update a routing table \n");

				route_mess = (route_msg_t*)(call Packet.getPayload(&packet,sizeof(route_msg_t)));
				route_mess->msg_type = ROUTE_REQ;
				route_mess->route_id = c++;
				route_mess->dst_add = mess->dst_add;

				route_mess->src_add = mess->src_add;
				route_mess->crt_node = TOS_NODE_ID;  

				post broadcast();	

		}
	}

*/


	/*
 	if(call AMSend.send(mess->dst_add,&packet,sizeof(my_msg_t)) == SUCCESS){
		dbg("radio_pack","Pacchetti inviati casualmente \n");
		dbg("radio_pack",">>>Pack\n \t Payload length %hhu \n", call Packet.payloadLength( &packet ) );
		dbg_clear("radio_pack","\t Source: %hhu \n ", call AMPacket.source( &packet ) );
		dbg_clear("radio_pack","\t Destination: %hhu \n ", call AMPacket.destination( &packet ) );
		dbg_clear("radio_pack","\t AM Type: %hhu \n ", call AMPacket.type( &packet ) );
		dbg_clear("radio_pack","\t Source: %hhu \n ", mess->src_add);
           	dbg_clear("radio_pack","\t Destination: %hhu \n ", mess->dst_add);
		dbg_clear("radio_pack","\t Data: %hhu \n ", mess->value);
		//dbg_clear("radio_pack","\t Current node: %hhu \n ", mess->crt_node);
		dbg_clear("radio_pack", "\t\t msg_type: %hhu \n ", mess->msg_type);
		dbg_clear("radio_pack", "\t\t msg_id: %hhu \n", mess->msg_id);
	}
	*/







/*

//TODO ELIMINARE I DUPLICATI MA PRIMA BISOGNA SALVARE LE ENTRY

	if (route_mess->msg_type == ROUTE_REQ && route_mess->msg_id != route_save[].msg_id) {
		route_mess = (route_msg_t*)(call Packet.getPayload(&packet,sizeof(route_msg_t)));
		route_save[].msg_type = route_mess->msg_type;
		route_save[].msg_id = route_mess->msg_id;
		route_save[].dst_add = route_mess->dst_add;
		route_save[].src_add = route_mess->src_add;   
	}

	if ( mess->msg_type == REQ ) {
			//post sendResp();
	}
*/


